{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"thamedia documentation","text":""},{"location":"#thamedia","title":"<code>thamedia</code>","text":"<p><code>mediaLib</code> is an OOP Python package for dealing with media files.</p> <p>This package is developed and maintained by thangckt</p>"},{"location":"download_youtube/","title":"download_youtube","text":""},{"location":"download_youtube/#thamedia.download_youtube","title":"<code>thamedia.download_youtube</code>","text":""},{"location":"download_youtube/#thamedia.download_youtube.videos_from_channel","title":"<code>videos_from_channel(channel_URL, period=1)</code>","text":"<p>get all video links from a channel in \"period\" days</p>"},{"location":"download_youtube/#thamedia.download_youtube.download_video","title":"<code>download_video(URLs, only_video=False, only_audio=False)</code>","text":"<p>Download videos from list of URLs Args:     URLs (list of str): list of URL     only_video (bool = True): dowload video only     only_audio (bool = True): dowload audio only</p>"},{"location":"download_youtube/#thamedia.download_youtube.download_srt_caption","title":"<code>download_srt_caption(url, lang='en', out_file='transcript_srt')</code>","text":"<p>Download video caption in .srt format Args:     download_cap (bool = False): download caption     lang (str = 'en'): language of caption</p> <p>Notes\"     Error now: https://github.com/pytube/pytube/issues/1085</p>"},{"location":"download_youtube/#thamedia.download_youtube.download_json_caption","title":"<code>download_json_caption(URL, out_file='transcript_json.json')</code>","text":"<p>Download video caption in .json format</p>"},{"location":"make_video/","title":"make_video","text":""},{"location":"make_video/#thamedia.make_video","title":"<code>thamedia.make_video</code>","text":"<p>Info</p> <p>Video size for 1 minute video : https://video4change.org/the-basics-of-video-resolution/     - Ultra HD or 4K: 3840 x 2160     320 MB     - Full HD       : 1920x1080       149 MB     - HD            : 1280x720        105 MB     - SD            : 720x480         26  MB    </p> <p>Quote</p> <p>running path: https://stackoverflow.com/questions/3430372/how-do-i-get-the-full-path-of-the-current-files-directory</p>"},{"location":"make_video/#thamedia.make_video.mknews_video_intro","title":"<code>mknews_video_intro(vid_size=(1280, 720), lang='vi', rate=150, bg_video='default', bg_audio='default', bg_audio_factor=0.3, out_file='vid_intro.mp4')</code>","text":"<p>Make INTRO video</p> <p>Parameters:</p> <ul> <li> <code>vid_size</code>             (<code>tuple</code>, default:                 <code>(1280, 720)</code> )         \u2013          <p>Video size.</p> </li> <li> <code>lang</code>             (<code>str</code>, default:                 <code>'vi'</code> )         \u2013          <p>language of news</p> </li> <li> <code>rate</code>             (<code>float</code>, default:                 <code>150</code> )         \u2013          <p>speed of voice</p> </li> <li> <code>bg_video</code>             (<code>str</code>, default:                 <code>'default'</code> )         \u2013          <p>filenames of video/image background. Possible: 'default', 'filename'</p> </li> <li> <code>bg_audio</code>             (<code>str</code>, default:                 <code>'default'</code> )         \u2013          <p>file name of audio background. Possible: 'default', 'filename'</p> </li> <li> <code>bg_audio_factor</code>             (<code>float</code>, default:                 <code>0.3</code> )         \u2013          <p>factor of backgroun audio with main voice.</p> </li> </ul>"},{"location":"make_video/#thamedia.make_video.mknews_video_outro","title":"<code>mknews_video_outro(vid_size=(1280, 720), lang='vi', rate=150, bg_video='default', bg_audio='default', bg_audio_factor=0.3, out_file='vid_outro.mp4')</code>","text":"<p>Make OUTRO video Args:     vid_size (tuple): Video size.     lang (str): language of news     rate (float): speed of voice     bg_video (str): filenames of video/image background. Possible: 'default', 'filename'     bg_audio (str): file name of audio background. Possible: 'default', 'filename'     bg_audio_factor (float): factor of backgroun audio with main voice.</p>"},{"location":"make_video/#thamedia.make_video.mknews_audio","title":"<code>mknews_audio(file_text, lang='vi', rate=150, greet_word='', end_word='', out_file='audio_news.mp3')</code>","text":"<p>create audio from file_text</p> <p>Parameters:</p> <ul> <li> <code>file_text</code>             (<code>str</code>)         \u2013          <p>lain text file.</p> </li> <li> <code>lang</code>             (<code>str</code>, default:                 <code>'vi'</code> )         \u2013          <p>language of news</p> </li> <li> <code>greet_word</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>Add speech at begin text. Possible: 'intro', 'middle', ''</p> </li> <li> <code>end_word</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>Add speech at begin text. Possible: 'outro', ''</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>out_file</code> (            <code>Obj</code> )        \u2013          <p>audio file</p> </li> </ul>"},{"location":"make_video/#thamedia.make_video.mknews_1_video","title":"<code>mknews_1_video(lang='vi', rate=150, greet_word='', end_word='', vid_size=(1280, 720), img_duration=15, bg_video='', bg_audio='random', bg_audio_factor=0.2, out_file='vid_news.mp4')</code>","text":"Make a video with concept <ul> <li>put a text file and all videos, images into a folder</li> <li>function will convert text to audio</li> <li>make video base on length of audio</li> <li>first use videos, if not enough duration then add images into video</li> <li>if bg_video: make video with only background<ul> <li>random_short: use short videos from computer</li> <li>random_download: random download long videos from a predefined list</li> </ul> </li> </ul> <p>Parameters:</p> <ul> <li> <code>lang</code>             (<code>str</code>, default:                 <code>'vi'</code> )         \u2013          <p>language of news</p> </li> <li> <code>rate(float)</code>         \u2013          <p>speed of voice</p> </li> <li> <code>vid_size</code>             (<code>tuple</code>, default:                 <code>(1280, 720)</code> )         \u2013          <p>Video size.</p> </li> <li> <code>img_duration</code>             (<code>float</code>, default:                 <code>15</code> )         \u2013          <p>duration of an image in video.</p> </li> <li> <code>bg_video</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>filenames of video/image background. Possible: '', 'random_short', 'random_long'</p> </li> <li> <code>bg_audio</code>             (<code>str</code>, default:                 <code>'random'</code> )         \u2013          <p>file name of audio background. Possible: \"filename\", 'random'</p> </li> <li> <code>bg_audio_factor</code>             (<code>float</code>, default:                 <code>0.2</code> )         \u2013          <p>factor of backgroun audio with main voice.</p> </li> <li> <code>greet_word</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>Add speech at begin text. Possible: 'intro', 'middle', ''</p> </li> <li> <code>end_word</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>Add speech at begin text. Possible: 'outro', ''</p> </li> </ul> Note <p>video/image files should begin with a number to specify its order: '1_video_...' or '3_image_...' Only fist \".txt\" files is used</p>"},{"location":"make_video/#thamedia.make_video.mknews_lists_videos","title":"<code>mknews_lists_videos(sub_folder='news*', lang='vi', rate=150, greet_word='', end_word='', vid_size=(1280, 720), img_duration=15, bg_video='', bg_audio='', bg_audio_factor=0.2, padding=0, logo='STV', logo_pos='left', out_file='vid_all_news.mp4')</code>","text":"<p>Make a videos in subfolder:</p> <p>Parameters:</p> <ul> <li> <code>sub_folder</code>             (<code>str</code>, default:                 <code>'news*'</code> )         \u2013          <p>keyword to search subfolders.   </p> </li> <li> <code>bg_audio</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>file name of audio background. Possible: \"filename\", 'random'</p> </li> <li> <code>padding</code>             (<code>float</code>, default:                 <code>0</code> )         \u2013          <p>gap between successive video</p> </li> </ul>"},{"location":"make_video/#thamedia.make_video.set_bg_audio","title":"<code>set_bg_audio(file_video, bg_audio='random', bg_audio_factor=0.2, keep_original=False)</code>","text":"<p>Set background_audio for video</p> <p>Parameters:</p> <ul> <li> <code>bg_audio</code>             (<code>str</code>, default:                 <code>'random'</code> )         \u2013          <p>file name of audio background. Possible: \"filename\", 'random'</p> </li> <li> <code>bg_audio_factor</code>             (<code>float</code>, default:                 <code>0.2</code> )         \u2013          <p>factor of backgroun audio with main voice.</p> </li> <li> <code>keep_original</code>             (<code>bool</code>, default:                 <code>False</code> )         \u2013          <p>keep original video or not</p> </li> </ul>"},{"location":"make_video/#thamedia.make_video.mknews_video_toc","title":"<code>mknews_video_toc(sub_folder='news*', file_video_news='vid_news.mp4', vid_size=(1280, 720), bg_video='default', bg_audio='default', bg_audio_factor=0.3, border_factor=0.2, with_title=False, out_file='vid_TOC.mp4')</code>","text":"<p>Make a TOC video:</p> <p>Parameters:</p> <ul> <li> <code>sub_folder</code>             (<code>str</code>, default:                 <code>'news*'</code> )         \u2013          <p>keyword to search subfolders. </p> </li> <li> <code>file_video_news</code>             (<code>str</code>, default:                 <code>'vid_news.mp4'</code> )         \u2013          <p>filename of breakingNews in each subfolder.</p> </li> </ul>"},{"location":"make_video/#thamedia.make_video.concate_audio_files","title":"<code>concate_audio_files(list_files, padding=0, out_file='concate_audio.mp3')</code>","text":"<p>concate a list of audios</p> <p>Parameters:</p> <ul> <li> <code>list_files</code>             (<code>list</code>)         \u2013          <p>list contains all audio files.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>file</code> (            <code>obj</code> )        \u2013          <p>audio file.</p> </li> </ul>"},{"location":"make_video/#thamedia.make_video.concate_video_files","title":"<code>concate_video_files(list_files, padding=0, out_file='concate_videoNews.mp4')</code>","text":"<p>concate a list of videos</p> <p>Parameters:</p> <ul> <li> <code>list_files</code>             (<code>list</code>)         \u2013          <p>list contains all video files.</p> </li> <li> <code>vid_size</code>             (<code>tuple</code>)         \u2013          <p>Video size.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>file</code> (            <code>obj</code> )        \u2013          <p>audio file.</p> </li> </ul>"},{"location":"make_video/#thamedia.make_video.add_logo_spokeman","title":"<code>add_logo_spokeman(file_video, vid_size=(1280, 720), logo='STV', logo_pos='left', spokeman='', spokeman_pos='left', h_spokeman=320, keep_original=False)</code>","text":"<p>add Logo on videos</p> <p>Parameters:</p> <ul> <li> <code>file_video</code>             (<code>str</code>)         \u2013          <p>video filename.</p> </li> <li> <code>vid_size</code>             (<code>tuple</code>, default:                 <code>(1280, 720)</code> )         \u2013          <p>Video size.</p> </li> <li> <code>logo</code>             (<code>str</code>, default:                 <code>'STV'</code> )         \u2013          <p>Put logo on video. Possible: \"N5_1\", \"N5_2\", 'X7', 'STV', \"\"</p> </li> <li> <code>logo_pos</code>             (<code>float</code>, default:                 <code>'left'</code> )         \u2013          <p>Position of logo. Possible: \"left\", \"rigt\"</p> </li> <li> <code>spokeman</code>             (<code>str</code>, default:                 <code>''</code> )         \u2013          <p>Spokeman on video. Possible: '', 'Anonymous'</p> </li> <li> <code>h_spokeman</code>             (<code>float</code>, default:                 <code>320</code> )         \u2013          <p>height of Spokeman</p> </li> <li> <code>background</code>             (<code>str</code>)         \u2013          <p>file name of video/image background. Possible: \"filename\", 'random'</p> </li> <li> <code>bg_audio</code>             (<code>str</code>)         \u2013          <p>file name of audio background</p> </li> </ul>"},{"location":"make_video/#thamedia.make_video.split_video","title":"<code>split_video(video_file, n=3)</code>","text":"<p>Split video into n parts</p>"},{"location":"make_video/#thamedia.make_video.speech_1_pair_lang","title":"<code>speech_1_pair_lang(text1, text2, lang1='VN', lang2='EN', voice_name1='', voice_name2='', rate1=130, rate2=120, repeat_slow=60, repeat_fast=60, out_file='pair_lang_audio.mp3')</code>","text":"<p>Returns:</p> <ul> <li> <code>file</code> (            <code>file</code> )        \u2013          <p>audio file, if <code>out_file</code> is not <code>None</code>.</p> </li> <li> <code>clip_audio</code> (            <code>Obj</code> )        \u2013          <p>audio file, if <code>out_file</code> is <code>None</code>.</p> </li> </ul>"},{"location":"make_video/#thamedia.make_video.speech_list_pair_lang","title":"<code>speech_list_pair_lang(df, lang1='VN', lang2='EN', rate1=130, rate2=120, repeat_slow=60, repeat_fast=60, out_file='pair_lang_audio_all.mp3')</code>","text":"<p>Parameters:</p> <ul> <li> <code>df</code>             (<code>DataFrame</code>)         \u2013          <p>contains 2 columns for langs.</p> </li> </ul>"},{"location":"make_video/#thamedia.make_video.mkvid_1_pair_lang","title":"<code>mkvid_1_pair_lang(text1, text2, lang1='VN', lang2='EN', voice_name1='', voice_name2='', rate1=130, rate2=120, repeat_slow=60, repeat_fast=60, vid_size=(1280, 720), font_size=80, text_color1='blue', text_color2='black', bg_color1='azure3', bg_color2='azure4', padding=1, show_flag=True, out_file='pair_lang.mp4')</code>","text":"<p>Make a video with concept:</p> <p>Args:</p>"},{"location":"make_video/#thamedia.make_video.mkvid_list_pair_lang_from_df","title":"<code>mkvid_list_pair_lang_from_df(df, lang1='VN', lang2='EN', voice_name1='', voice_name2='', rate1=130, rate2=120, repeat_slow=60, repeat_fast=60, vid_size=(1280, 720), font_size=80, text_color1='blue', text_color2='black', bg_color1='azure4', bg_color2='CadetBlue4', padding=1, show_flag=True, out_file='vid_pair_lang.mp4')</code>","text":"<p>Parameters:</p> <ul> <li> <code>df</code>             (<code>DataFrame</code>)         \u2013          <p>contains 2 columns for langs.</p> </li> </ul>"},{"location":"read_text/","title":"read_text","text":""},{"location":"read_text/#thamedia.read_text","title":"<code>thamedia.read_text</code>","text":""},{"location":"read_text/#thamedia.read_text.pre_text","title":"<code>pre_text(filename=None)</code>","text":"<p>Load preTEXT</p> <p>Parameters:</p> <ul> <li> <code>filename</code>             (<code>Str</code>, default:                 <code>None</code> )         \u2013          <p>name of preTEXT file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ds</code> (            <code>Series</code> )        \u2013          <p>Series</p> </li> </ul>"},{"location":"read_text/#thamedia.read_text.read_text_pair","title":"<code>read_text_pair(filename, separator=':')</code>","text":"<p>read file that format as pair, separated by semicolon (:). </p> <p>Parameters:</p> <ul> <li> <code>filename</code>             (<code>Str</code>)         \u2013          <p>name of text file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>df</code> (            <code>DataFrame</code> )        \u2013          <p>DataFrame contains 2 columns <code>c1</code> and <code>c2</code>, corresponds to pair text</p> </li> </ul>"},{"location":"read_text/#thamedia.read_text.read_text_column","title":"<code>read_text_column(filename, separator=':', column_line=0)</code>","text":"<p>read file that format as pair, separated by semicolon (:). </p> <p>Parameters:</p> <ul> <li> <code>filename</code>             (<code>Str</code>)         \u2013          <p>name of text file</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>df</code> (            <code>DataFrame</code> )        \u2013          <p>DataFrame contains 2 columns <code>c1</code> and <code>c2</code>, corresponds to pair text</p> </li> </ul>"},{"location":"read_text/#thamedia.read_text.read_text_news","title":"<code>read_text_news(file_text, whole_text=False, replace_Abbrev=False, file_list_abbrev=DATA_PATH + '/list_abbrev.txt')</code>","text":"<p>Read text  Args:     file_text (str): plain text file.     whole_text (bool): read whole text and not decompose author, title,...     replace_Abbrev (bool): cho0se to auto replace Abbrev     file_list_abbrev (str): filename of .json file, contains list of Abbrev</p> <p>Note</p> <p>no empty line between 1<sup>st</sup> and 2<sup>nd</sup> lines</p>"},{"location":"read_text/#thamedia.read_text.find_abbrev","title":"<code>find_abbrev(text)</code>","text":"<p>https://stackoverflow.com/questions/60738190/regular-expression-to-find-a-series-of-uppercase-words-in-a-string</p>"},{"location":"read_text/#thamedia.read_text.read_text_subtitle","title":"<code>read_text_subtitle(filename, format_=None)</code>","text":"<p>Read caption file, support format: json, rst</p>"},{"location":"read_text/#thamedia.read_text.json_caption_to_text","title":"<code>json_caption_to_text(transcript_dict, out_file=None)</code>","text":"<p>transcript (dict): download by youtubesearchpython.Transcript[\"segments\"]</p>"},{"location":"read_text/#thamedia.read_text.json_caption_unify","title":"<code>json_caption_unify(transcript_dict)</code>","text":"<p>transcript (dict): download by youtubesearchpython.Transcript[\"segments\"]</p>"},{"location":"read_text/#thamedia.read_text.convert_json_to_srt","title":"<code>convert_json_to_srt(transcript_dict, fps=25, out_file='transcript_rst.rst')</code>","text":"<p>transcript (dict): download by youtubesearchpython.Transcript[\"segments\"] fps (int): Frame per second. Can check using moviepy package</p>"},{"location":"search_google/","title":"search_google","text":""},{"location":"search_google/#thamedia.search_google","title":"<code>thamedia.search_google</code>","text":""},{"location":"search_google/#thamedia.search_google.Distance","title":"<code>Distance(term1, term2)</code>","text":"<p>Get google distance between words Returns float</p>"},{"location":"search_google/#thamedia.search_google.get_user_agent","title":"<code>get_user_agent()</code>","text":"<p>Get a random user agent string. Return string</p>"},{"location":"search_google/#thamedia.search_google.get_hits","title":"<code>get_hits(query, tld='com', lang='sv', tbs='0', safe='off', extra_params={}, tpe='', user_agent=None)</code>","text":"<p>This function return the amount of hits on search query Return int</p>"},{"location":"search_google/#thamedia.search_google.Download","title":"<code>Download(url_list, out_format, download_dir)</code>","text":"<p>Download url as html file Returns folder</p>"},{"location":"search_google/#thamedia.search_google.search","title":"<code>search(query, tld='com', lang='en', tbs='0', safe='off', num=10, start=0, stop=10, pause=2.0, only_standard=False, extra_params={}, tpe='', user_agent=None, type='text', rights='', download=False, download_dir='downloads', out_format='html')</code>","text":"<p>SEARCH This is a simplified search function implementation. I added some parameters to make it more generic towards google and google_search_image import. I have not experimented with all different parameters. Code assume from examples on the imported libraries github repos. ARGUMENTS:     query (str) \u2013 Query string. Must NOT be url-encoded.     tld (str) \u2013 Top level domain.     lang (str) \u2013 Language.     tbs (str) \u2013 Time limits (i.e \u201cqdr:h\u201d =&gt; last hour, \u201cqdr:d\u201d =&gt; last 24 hours, \u201cqdr:m\u201d =&gt; last month).     safe (str) \u2013 Safe search.     num (int) \u2013 Number of results per page.     start (int) \u2013 First result to retrieve. or None     stop (int) \u2013 Last result to retrieve. Use None to keep searching forever.     of str or None  (list) \u2013 A list of web  to constrain the search.     pause (float) \u2013 Lapse to wait between HTTP requests. A lapse too long will make the search slow, but a lapse too short may cause Google to block your IP. Your mileage may vary!     only_standard (bool) \u2013 If True, only returns the standard results from each page. If False, it returns every possible link from each page, except for those that point back to Google itself. Defaults to False for backwards compatibility with older versions of this module.     of str to str extra_params (dict) \u2013 A dictionary of extra HTTP GET parameters, which must be URL encoded. For example if you don\u2019t want Google to filter similar results you can set the extra_params to {\u2018filter\u2019: \u20180\u2019} which will append \u2018&amp;filter=0\u2019 to every query.     tpe (str) \u2013 Search type (images, videos, news, shopping, books, apps) Use the following values {videos: \u2018vid\u2019, images: \u2018isch\u2019, news: \u2018nws\u2019, shopping: \u2018shop\u2019, books: \u2018bks\u2019, applications: \u2018app\u2019}     or None user_agent (str) \u2013 User agent for the HTTP requests. Use None for the default.     type - Changes which function to use.     ----- For images only -----     download_dir -  if download is active, download_dir will discribe output directory     rights - (str) - Values labeled-for-reuse-with-modifications,labeled-for-reuse, labeled-for-noncommercial-reuse-with-modification,labeled-for-nocommercial-reuse     download - Download html, pdf or image,    Takes a set of urls and tries to download them to download_dir, If download_dir is None, won't save on drive, Return reference list to images, download_dir file to save to     # Read more here: https://python-googlesearch.readthedocs.io/en/latest/</p> <p>Returns:</p> <ul> <li>         \u2013          <p>Generator (iterator) that yields found URLs. If the stop parameter is None the iterator will loop forever.</p> </li> </ul>"},{"location":"search_image/","title":"search_image","text":""},{"location":"search_image/#thamedia.search_image","title":"<code>thamedia.search_image</code>","text":""},{"location":"search_image/#thamedia.search_image.search_image","title":"<code>search_image(keywords, safe=False, download=False, num=10, pause=2.0, output_dir='download_image', time='past-7-days', time_range=None, rights='', similar_images=False, img_format=None, color=None, color_type=None, size='&gt;640*480', img_type=None, url=None, specific_site=None, single_image=None, ignore_urls=None)</code>","text":"<p>Search and download images List args: https://google-images-download.readthedocs.io/en/latest/arguments.html</p> Agrs <p>keywords (str): Query string. Must NOT be url-encoded. tld (str) \u2013 Top level domain. format (str): format/extension of the image. Possible values: jpg, gif, png, bmp, svg, webp, ico, raw</p> <p>safe (str) \u2013 Safe search. num (int) \u2013 Number of results per page. start (int) \u2013 First result to retrieve. or None stop (int) \u2013 Last result to retrieve. Use None to keep searching forever. of str or None  (list) \u2013 A list of web  to constrain the search. pause (float) \u2013 Lapse to wait between HTTP requests. A lapse too long will make the search slow, but a lapse too short may cause Google to block your IP. Your mileage may vary! only_standard (bool) \u2013 If True, only returns the standard results from each page. If False, it returns every possible link from each page, except for those that point back to Google itself. Defaults to False for backwards compatibility with older versions of this module. of str to str extra_params (dict) \u2013 A dictionary of extra HTTP GET parameters, which must be URL encoded. For example if you don\u2019t want Google to filter similar results you can set the extra_params to {\u2018filter\u2019: \u20180\u2019} which will append \u2018&amp;filter=0\u2019 to every query. tpe (str) \u2013 Search type (images, videos, news, shopping, books, apps) Use the following values {videos: \u2018vid\u2019, images: \u2018isch\u2019, news: \u2018nws\u2019, shopping: \u2018shop\u2019, books: \u2018bks\u2019, applications: \u2018app\u2019} or None user_agent (str) \u2013 User agent for the HTTP requests. Use None for the default. type - Changes which function to use. ----- For images only ----- output_dir -  if download is active, output_dir will discribe output directory rights - (str) - Values labeled-for-reuse-with-modifications,labeled-for-reuse, labeled-for-noncommercial-reuse-with-modification,labeled-for-nocommercial-reuse download - Download html, pdf or image,    Takes a set of urls and tries to download them to output_dir, If output_dir is None, won't save on drive, Return reference list to images, output_dir file to save to</p> <p>Returns:</p> <ul> <li>         \u2013          <p>Generator (iterator) that yields found URLs. If the stop parameter is None the iterator will loop forever.</p> </li> </ul>"},{"location":"search_image/#thamedia.search_image.search_image--read-more-here-httpspython-googlesearchreadthedocsioenlatest","title":"Read more here: https://python-googlesearch.readthedocs.io/en/latest/","text":""},{"location":"text_to_speech/","title":"text_to_speech","text":""},{"location":"text_to_speech/#thamedia.text_to_speech","title":"<code>thamedia.text_to_speech</code>","text":""},{"location":"text_to_speech/#thamedia.text_to_speech.tts_online_gTTS","title":"<code>tts_online_gTTS(text, lang='en', audio_file='voice.mp3')</code>","text":"<p>Parameters:</p> <ul> <li> <code>text</code>             (<code>str</code>)         \u2013          <p>text string</p> </li> </ul>"},{"location":"text_to_speech/#thamedia.text_to_speech.tts_offline_pyttsx3","title":"<code>tts_offline_pyttsx3(text, lang='vi', voice_name='', voice_id=None, rate=150, vol=1.0, audio_file='voice.mp3')</code>","text":"<p>Convert text to speech. Agrs:     lang (str): select the language. Possible with all voices available in local computer: 'vi', 'VN', 'US',...     text (str): string of text     rate (float): voice speed     voice_name (str): name of speaker.     voice_id (int): id of voices in Windows, this parameter sets both languages and voice.</p>"}]}